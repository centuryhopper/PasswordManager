@using System.Net.Http.Headers
@using static Shared.Models.ServiceResponses

<div class="m-3 p-3" style="overflow-y: scroll; height: 30rem;">
    <InputFile OnChange="HandleFileSelected" />
    <br>
    <button disabled="@loading" @onclick="SubmitFile" class="btn btn-primary mt-3">
        @if (loading)
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Submit
    </button>
    <p>@message</p>

    <div>
        <span class="mt-3 font-weight-bold">
            Click on the link to get the CSV file format sample: 
            <a href="templates/example.csv">Example File</a>
        </span>
    </div>
</div>

<NotificationModal @ref="notificationModal" />


@code {
    private NotificationModal notificationModal {get; set;}

    private HttpClient httpClient { get;set; }
    private IBrowserFile selectedFile;
    private string message = string.Empty;
    private bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        httpClient = httpClientFactory.CreateClient(Constants.HTTP_CLIENT);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        if (selectedFile == null || selectedFile.Size == 0)
        {
            await notificationModal.ShowAsync("Error", "No file selected or file is empty.", ModalType.ERROR);
        }
        else
        {
            await notificationModal.ShowAsync("Success", $"File selected: {selectedFile.Name}", ModalType.SUCCESS);
        }
    }

    private async Task SubmitFile()
    {
        if (selectedFile == null || selectedFile.Size == 0)
        {
            await notificationModal.ShowAsync("Error", "No file selected or file is empty.", ModalType.ERROR);
            return;
        }

        loading = true;

        try
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(selectedFile.Size));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("application/octet-stream");
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await httpClient.PostAsync("/api/PasswordManager/upload-csv", content);

            var responseContent = await response.Content.ReadFromJsonAsync<Shared.Models.ServiceResponses.GeneralResponse>();

            if (!responseContent.Flag)
            {
                await notificationModal.ShowAsync("Error", responseContent.Message, ModalType.ERROR);
            }
            else
            {
                await notificationModal.ShowAsync("Success", responseContent.Message, ModalType.SUCCESS);
            }


        }
        catch (Exception ex)
        {
            await notificationModal.ShowAsync("Error", ex.Message, ModalType.ERROR);
        }
        finally {
            NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
            loading = false;
        }

    }

}