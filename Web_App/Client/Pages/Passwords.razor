@page "/passwords"
@using System.Linq.Expressions
@attribute [Authorize]

@inject IHandyGridState<HandyGridEntity, PasswordAccountDTO> handyGridState

@*

clear nuget cache if not getting the latest version:
- cd Client && dotnet nuget locals all --clear && dotnet remove package HandyBlazorComponents ; dotnet add package HandyBlazorComponents && cd ..

*@

@if (handyGridState.Items is null)
{
    <div class="d-flex justify-content-center">
    <div id="loadingIndicator" class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>
}
else
{
    @* TODO: recreate using interface from razor class lib. Make singleton inherit from interface DONE*@
    <CascadingValue Name="HandyGridState" Value="handyGridState" IsFixed="true">
        <DynamicHandyGrid
            @ref="dynamicHandyGrid"
            TItem="PasswordAccountDTO"
            Entity="HandyGridEntity"
            TMapper="PasswordsMapper"
            OnCreate="OnCreate"
            OnUpdate="OnUpdate"
            OnDelete="OnDelete" />
    </CascadingValue>

}

<NotificationModal @ref="notificationModal" />
<ConfirmModal @ref="confirmModal" Title="Warning"
    BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />
<HandyToast @ref="handyToast" Title="Success" Message="Your operation completed successfully."
    ToastType="HandyToastType.SUCCESS" Duration="5" />


@code {
    private HandyToast handyToast = default!;
    private HttpClient httpClient { get; set; }
    private int userId { get; set; }
    private DynamicHandyGrid<PasswordAccountDTO, HandyGridEntity, PasswordsMapper> dynamicHandyGrid = default!;
    private ConfirmModal confirmModal { get; set; }
    private NotificationModal notificationModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        httpClient = httpClientFactory.CreateClient(Constants.HTTP_CLIENT);
        handyGridState.Items = (await
            httpClient.GetFromJsonAsync<IEnumerable<PasswordAccountDTO>>("api/PasswordManager/passwords")).Select(p => new HandyGridEntity(Object: new
                        PasswordAccountDTO
                            {
                                Title = p.Title,
                                Id = p.Id,
                                UserId = p.UserId,
                                Username = p.Username,
                                Password = p.Password,
                                CreatedAt = p.CreatedAt,
                                LastUpdatedAt = p.LastUpdatedAt,
                            })).OrderBy(p => p.Object.Id).ToList();

        handyGridState.EditModeFragments = new()
        {
            {
                nameof(PasswordAccountDTO.Password),
                o => @<ObscureInput TItem="PasswordAccountDTO" ColumnName="@(nameof(PasswordAccountDTO.Password))" Item="o.Object"
                    Style="width: 12rem;" />
            },
        };

        handyGridState.ViewModeFragments = new()
        {
            {
                nameof(PasswordAccountDTO.Password),
                o => @<span>@(new string('*', o.Object.Password.Length))</span>
            },
        };

        handyGridState.ReadonlyColumns = [nameof(PasswordAccountDTO.Id), nameof(PasswordAccountDTO.UserId), nameof(PasswordAccountDTO.CreatedAt), nameof(PasswordAccountDTO.LastUpdatedAt)];

        handyGridState.OnSubmitFile = async (results) => {
            // results.ToList().ForEach(x => Console.WriteLine(x.Id));
            // PasswordAccountLst.AddRange(results);
            // Console.WriteLine("posting submitted file to server");
            var response = await httpClient.PostAsJsonAsync("/api/PasswordManager/upload-csv", results.Select(e=>e.Object));
            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
            if (!responseContent.Flag)
            {
                _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
            }
            else
            {
                _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
            }
        };

        var authState = await ((ApiAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        userId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
    }

    private async Task OnCreate(IEnumerable<HandyGridEntity> items)
    {
        items.ToList().ForEach(i => Console.WriteLine($"{i.Object.Title}, {i.Object.Username}, {i.Object.Password}"));
        // items = items.Where(item => !string.IsNullOrWhiteSpace(item.Title) && !string.IsNullOrWhiteSpace(item.Username) &&
        // !string.IsNullOrWhiteSpace(item.Password)).ToList();
        Console.WriteLine("creating items");
        var list = items.ToList();
        for (var i = 0; i < list.Count; i++)
        {
            list[i].Object.Id = handyGridState.Items.Max(x => x.Object.Id) + 1;
            list[i].Object.UserId = userId;
            list[i].Object.CreatedAt = DateTime.Now;
            list[i].Object.LastUpdatedAt = DateTime.Now;
        }

        // PasswordAccountLst.AddRange(items);

        // apply changes here to db in real-world scenario as well
        var response = await httpClient.PostAsJsonAsync("api/PasswordManager/add-passwords", JsonConvert.SerializeObject(list.Select(e=>e.Object)));

        var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();

        if (!responseContent.Flag)
        {
            _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
        }
        else
        {
            //Console.WriteLine(responseContent.Message);
            _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
        }
    }

    private async Task OnDelete(HandyGridEntity item)
    {
        //Console.WriteLine("deleting item");
        //PasswordAccountLst = PasswordAccountLst.Where(o => o.Id != item.Id).ToList();
        // Apply changes here to db in real-world scenario as well
        var response = await httpClient.DeleteAsync($"api/PasswordManager/deletePassword/{item.Object.Id}");
        var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        if (!responseContent.Flag)
        {
            _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
        }
        else
        {
            _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
        }
    }

    private async Task OnUpdate(HandyGridEntity item)
    {
        //Console.WriteLine("updating item");
        item.Object.LastUpdatedAt = DateTime.Now;
        var response = await httpClient.PutAsJsonAsync("api/PasswordManager/update-password", item.Object);
        var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        if (!responseContent.Flag)
        {
            _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
        }
        else
        {
            _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
        }

        //for (int i = 0; i < PasswordAccountLst.Count; i++)
        //{
        // if (PasswordAccountLst[i].Id == item.Id)
        // {
        // PasswordAccountLst[i].Title = item.Title;
        // PasswordAccountLst[i].Username = item.Username;
        // PasswordAccountLst[i].Password = item.Password;
        // PasswordAccountLst[i].LastUpdatedAt = DateTime.Now;
        //
        // // Apply changes here to db in real-world scenario as well
        // var response = await httpClient.PutAsJsonAsync("api/PasswordManager/update-password", PasswordAccountLst[i]);
        // var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
        // if (!responseContent.Flag)
        // {
        // _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
        // }
        // else
        // {
        // _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
        // }
        // }
        //}
    }

}
