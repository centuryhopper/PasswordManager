@page "/passwords"
@using System.Linq.Expressions
@using Client.Services
@attribute [Authorize]

@*

clear nuget cache if not getting the latest version:
- cd Client && dotnet nuget locals all --clear && dotnet remove package HandyBlazorComponents ; dotnet add package HandyBlazorComponents && cd ..

*@

@if (doneLoadingLst)
{
    <CascadingValue Name="HandyGridState" Value="handyGridState" IsFixed="true">
        <DynamicHandyGrid TItem="PasswordAccountDTO" TEntity="HandyGridEntity" Items="Items"/>
        @* <UploadComponent TItem="PasswordAccountDTO" TMapper="PasswordsMapper" TEntity="HandyGridEntity" /> *@
    </CascadingValue>
}
else
{
    <div class="d-flex justify-content-center">
        <div id="loadingIndicator" class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}

<NotificationModal @ref="notificationModal" />
<ConfirmModal @ref="confirmModal" Title="Warning"
    BodyText="Are you sure you want to delete this record? THIS ACTION IS IRREVERSIBLE!" />
<HandyToast @ref="handyToast" Title="Success" Message="Your operation completed successfully."
    ToastType="HandyToastType.SUCCESS" Duration="5" />


@code {
    private bool doneLoadingLst = false;

    private GridStateService handyGridState;
    private HandyToast handyToast = default!;
    private HttpClient httpClient { get; set; }
    private int userId { get; set; }
    private ConfirmModal confirmModal { get; set; }
    private NotificationModal notificationModal { get; set; }
    private List<HandyGridEntity> Items = new();

    protected override async Task OnInitializedAsync()
    {
        httpClient = httpClientFactory.CreateClient(Constants.HTTP_CLIENT);
        Items = (await
        httpClient.GetFromJsonAsync<IEnumerable<PasswordAccountDTO>>("api/PasswordManager/passwords")).Select(p => new
        HandyGridEntity(Object: new
        PasswordAccountDTO
        {
            Title = p.Title,
            Id = p.Id,
            UserId = p.UserId,
            Username = p.Username,
            Password = p.Password,
            CreatedAt = p.CreatedAt,
            LastUpdatedAt = p.LastUpdatedAt,
        })).OrderBy(p => p.Object.Id).ToList();

        
        handyGridState = new(
        Items: Items,
        ReadonlyColumns: [nameof(PasswordAccountDTO.Id), nameof(PasswordAccountDTO.UserId),
nameof(PasswordAccountDTO.CreatedAt), nameof(PasswordAccountDTO.LastUpdatedAt)],
        IsReadonly: false,
        OnCreate: async (items) =>
        {
            items.ToList().ForEach(i => Console.WriteLine($"{i.Object.Title}, {i.Object.Username}, {i.Object.Password}"));
            // Console.WriteLine("creating items");
            var list = items.ToList();
            for (var i = 0; i < list.Count; i++)
            {
                list[i].Object.Id = Items.Max(x => x.Object.Id) + 1;
                list[i].Object.UserId = userId;
                list[i].Object.CreatedAt = DateTime.Now;
                list[i].Object.LastUpdatedAt = DateTime.Now;
            }

            // PasswordAccountLst.AddRange(items);

            // apply changes here to db in real-world scenario as well
            var response = await httpClient.PostAsJsonAsync("api/PasswordManager/add-passwords",
    JsonConvert.SerializeObject(list.Select(e => e.Object)));

            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();

            if (!responseContent.Flag)
            {
                _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
            }
            else
            {
                //Console.WriteLine(responseContent.Message);
                _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
                Items.AddRange(list);
                StateHasChanged();
            }
        },
        OnDelete: async (item) =>
        {
            // Apply changes here to db in real-world scenario as well
            var response = await httpClient.DeleteAsync($"api/PasswordManager/deletePassword/{item.Object.Id}");
            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
            if (!responseContent.Flag)
            {
                _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
            }
            else
            {
                _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
                var toDelete = Items.Find(o => o.Object.Id == item.Object.Id);
                if (toDelete is not null)
                {
                    Items.Remove(toDelete);
                    StateHasChanged();
                }
            }
        },
        OnUpdate: async (item) =>
        {
            item.Object.LastUpdatedAt = DateTime.Now;
            var response = await httpClient.PutAsJsonAsync("api/PasswordManager/update-password", item.Object);
            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
            if (!responseContent.Flag)
            {
                _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
            }
            else
            {
                _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
                var idx = Items.FindIndex(o => o.Object.Id == item.Object.Id);
                if (idx != -1)
                {
                    Items[idx] = item;
                    StateHasChanged();
                }
            }
        },
        ExampleFileUploadUrl: "templates/example.csv",
        OnSubmitFile: async (results) =>
        {
            // results.ToList().ForEach(x => Console.WriteLine(x.Id));
            // PasswordAccountLst.AddRange(results);
            // Console.WriteLine("posting submitted file to server");
            var response = await httpClient.PostAsJsonAsync("/api/PasswordManager/upload-csv", results.Select(e => e.Object));
            var responseContent = await response.Content.ReadFromJsonAsync<GeneralResponse>();
            if (!responseContent.Flag)
            {
                _ = handyToast.ShowToastAsync("Error", responseContent.Message, HandyToastType.ERROR);
            }
            else
            {
                _ = handyToast.ShowToastAsync("Success", responseContent.Message, HandyToastType.SUCCESS);
            }
        },
        EditModeFragments: [
        new NamedRenderFragment<HandyGridEntity>(Name: nameof(PasswordAccountDTO.Password),
        Fragment: o => @<ObscureInput TItem="PasswordAccountDTO" ColumnName="@(nameof(PasswordAccountDTO.Password))" Item="o.Object"
        Style="width: 12rem;" />),
        new NamedRenderFragment<HandyGridEntity>(Name: nameof(PasswordAccountDTO.Password),
        Fragment: o => @<HandyTextAreaInput TItem="PasswordAccountDTO" ColumnName="@(nameof(PasswordAccountDTO.Password))" Item="o.Object"
    Style="width: 12rem;" />),

],
ViewModeFragments: [
new NamedRenderFragment<HandyGridEntity>(Name: nameof(PasswordAccountDTO.Password), Fragment: o => @<span>@(new
    string('*', Math.Min(o.Object.Password.Length, 10)))</span>)
]);

        doneLoadingLst = true;

        var authState = await ((ApiAuthenticationStateProvider)AuthenticationStateProvider).GetAuthenticationStateAsync();
        var user = authState.User;

        userId = Convert.ToInt32(user.Claims.First(c => c.Type == ClaimTypes.NameIdentifier).Value);
    }
    
}
